#include <iostream>
#include <cstdlib>
#include <time.h>
#include "QQ.h"

using namespace std;

class customer{
public:
	customer(){}
	void incMins(){ minutesWaited++; }
	void setTransaction(const char& a){ transactionType = a; }
	char getTransaction(){ return transactionType; }
private:
	int minutesWaited = 0;
	char transactionType;
};

class teller{
public:
	teller(){ busy = 0; timer = 0; }
	bool isBusy(){ return busy; }
	void decTimer(){ timer--; }
	void setTimer(const int& timeItTakesToHelpCustomer){ timer = timeItTakesToHelpCustomer; }
	int getTimer(){ return timer; }
	void setBusy(const bool& a){ busy = a; }
private:
	int timer;
	bool busy;
};

int main(){
	srand(time(NULL));
	int lengthOfSim, expectedSrvcTimeCrdt, expectedSrvcTimeDbt;
	double a, b, c, d, e, curProb, avgWaitTime, distArrivalTime, totalWaitTime = 0, curCustomersInQ = 0, totalCustomers = 0;

	teller teller1;
	Queue<customer> line1(5000);

	//despite using namespace std, the code gives me an error for every cout if I don't scope it with std
	std::cout << "Please enter how often a customer arrives. If a customer arrives every five minutes, then enter 5." << endl;
	cin >> distArrivalTime;
	distArrivalTime = pow(distArrivalTime, -1);
	std::cout << "Please enter the length of time for the simulation" << endl;
	cin >> lengthOfSim;
	std::cout << "Please enter the expected service time per customer for credit transactions" << endl;
	cin >> expectedSrvcTimeCrdt;
	std::cout << "Please enter the expected service time per customer for debit transactions" << endl;
	cin >> expectedSrvcTimeDbt;

	for (int minutes = 0; minutes < lengthOfSim || curCustomersInQ; minutes++){
		//run this loop while minutes less than the length of the simulation and there are customers in line
		customer customer1;

		a = rand(), b = RAND_MAX, curProb = a / b; //set the probability of a customer arriving this minute

		//if 0 < probability < distribution_of_arrival_time && the bank is still open then add a customer to line1  
		//and increment the number of total customers and the number of customers in line
		if (curProb <= distArrivalTime && minutes < lengthOfSim){
			line1.enqueue(customer1);
			curCustomersInQ++;
			totalCustomers++;

			c = rand(), d = RAND_MAX, e = c / d; //get the probability of which transaction type this customer will be
			if (e > .5)
				customer1.setTransaction('d');//debit if current probability > .5
			else if (e < .5)
				customer1.setTransaction('c');//credit if current probability < .5
			else
				customer1.setTransaction('o');//other if current probability == 5,
			//this results in a customer taking 30 minutes to complete their transaction,
			//perhaps insisting on speaking with the branch manager and compaining about
			//the ineptitude of the teller while everyone else on line gets furious
		}

		//if there is a customer on line and a teller is free then send the customer to the teller
		customer *tempForCheckingMins = new customer[curCustomersInQ];//allocate an array of customers that's the size of the line

		for (int p = 0; p < curCustomersInQ; p++){
			tempForCheckingMins[p] = line1.Front(); //put the customer at the front of the line into the array
			line1.dequeue();						//remove the customer from the line
			if (!teller1.isBusy()){					//if the teller is available...
				p--;				//decrement p, that's to say, replace the current element of the array
				curCustomersInQ--;	//decrement the number of customers in line

				if (customer1.getTransaction() == 'd')			//set the teller's timer to expected service time
					teller1.setTimer(expectedSrvcTimeDbt + 1);	//for credit, debit, or other
				else if (customer1.getTransaction() == 'c')		//these are all +1 because the teller's timer is
					teller1.setTimer(expectedSrvcTimeCrdt + 1);	//decremented at the end of the minute and it
				else if (customer1.getTransaction() == 'o')		//that should not happen in the same minute that
					teller1.setTimer(31);						//the customer got on line
				else
				{
					cout << "error at teller1.setTimer(), invalid transaction type" << endl;
					exit(1);
				}
				teller1.setBusy(true);	//the teller is now busy
			}
		}

		for (int q = curCustomersInQ; q > 0; q--){		//all the customers that were just taken from the line into the array
			line1.enqueue(tempForCheckingMins[q]);		//are now replaced in reverse order so it is still first come first serve
		}

		customer *tempForIncMins = new customer[curCustomersInQ]; //allocate an array of customers that's the size of the line 

		for (int i = 0; i < curCustomersInQ; i++){	//for the whole line...
			line1.Front().incMins();				//increment the number of minutes waited for the customer at the front
			tempForIncMins[i] = line1.Front();		//put the customer at the front of the line into the array
			totalWaitTime++;						//increment the total wait time
			line1.dequeue();						//remove the front customer
		}

		for (int j = curCustomersInQ; j > 0; j--){	//all the customers that were just taken from the line into the array
			line1.enqueue(tempForIncMins[j]);	//are now replaced in reverse order so it is still first come first serve 
		}

		teller1.decTimer();						//decrement the teller's timer
		if (teller1.getTimer() <= 0){			//if the teller's timer doesn't have a positive value
			teller1.setTimer(0);				//then set it to zero
			teller1.setBusy(false);				//and indicate that the teller is not busy
		}
		else if (teller1.getTimer() > 0)		//if the teller's timer has a positive value
			teller1.setBusy(true);				//then indicate that the teller is busy
	}

	avgWaitTime = totalWaitTime / (totalCustomers);
	std::cout << "Average wait time = " << avgWaitTime << " minutes" << endl;


	return 0;
}
